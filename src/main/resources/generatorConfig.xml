<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>

    <!--
		targetRuntime="MyBatis3Simple":生成简单版的CRUD
		MyBatis3:豪华版
	 -->
    <context id="DB2Tables" targetRuntime="MyBatis3Simple">

        <!-- optional，旨在创建class时，对注释进行控制 -->
        <commentGenerator>
            <property name="suppressDate" value="true"/>
            <property name="suppressAllComments" value="true"/>
        </commentGenerator>

        <!-- jdbcConnection：指定如何连接到目标数据库 -->
        <jdbcConnection driverClass="com.mysql.jdbc.Driver"
                        connectionURL="jdbc:mysql://localhost:3306/mybatis?allowMultiQueries=true"
                        userId="root"
                        password="root">
        </jdbcConnection>

        <!-- 非必需，类型处理器，在数据库类型和java类型之间的转换控制-->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <!-- javaModelGenerator：指定javaBean的生成策略
                targetPackage="test.model"：目标包名  指定生成的model生成所在的包名
                targetProject="\MBGTestProject\src"：目标工程   指定在该项目下所在的路径
        -->
        <!-- enableSubPackages:是否让schema作为包的后缀 -->
        <!-- 是否允许子包，即targetPackage.schemaName.tableName    生成pojo -->
        <javaModelGenerator targetPackage="com.hy.bean" targetProject=".\src\main\java">
            <property name="enableSubPackages" value="false"/>
            <!-- 是否对类CHAR类型的列的数据进行trim操作 -->
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>
        <!-- sqlMapGenerator：sql映射生成策略：   生成mapper.xml文件 -->
        <sqlMapGenerator targetPackage="mapper" targetProject=".\src\main\resources">
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>
        <!-- javaClientGenerator:指定mapper接口所在的位置  生成dao(mapper)接口-->
        <javaClientGenerator type="XMLMAPPER" targetPackage="com.hy.mapper" targetProject=".\src\main\java">
            <property name="enableSubPackages" value="false"/>
        </javaClientGenerator>

        <!-- 指定要逆向分析哪些表：根据表要创建javaBean -->
        <!-- generatedKey用于生成生成主键的方法，
           如果设置了该元素，MBG会在生成的<insert>元素中生成一条正确的<selectKey>元素，该元素可选
           column:主键的列名；
           sqlStatement：要生成的selectKey语句，有以下可选项：
               Cloudscape:相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()
               DB2       :相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()
               DB2_MF    :相当于selectKey的SQL为：SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1
               Derby     :相当于selectKey的SQL为：VALUES IDENTITY_VAL_LOCAL()
               HSQLDB    :相当于selectKey的SQL为：CALL IDENTITY()
               Informix  :相当于selectKey的SQL为：select dbinfo('sqlca.sqlerrd1') from systables where tabid=1
               MySql     :相当于selectKey的SQL为：SELECT LAST_INSERT_ID()
               SqlServer :相当于selectKey的SQL为：SELECT SCOPE_IDENTITY()
               SYBASE    :相当于selectKey的SQL为：SELECT @@IDENTITY
               JDBC      :相当于在生成的insert元素上添加useGeneratedKeys="true"和keyProperty属性
       <generatedKey column="" sqlStatement=""/>
        -->
        <table tableName="depart" domainObjectName="Depart"
               enableCountByExample="false"
               enableUpdateByExample="false"
               enableDeleteByExample="false"
               enableSelectByExample="false"
               selectByExampleQueryId="false">
            <generatedKey column="id" sqlStatement="Mysql" identity="true"/>
        </table>

    </context>
</generatorConfiguration>