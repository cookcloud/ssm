<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">

    <!--SpringMVC只是控制网站跳转逻辑  -->
    <!-- 只扫描控制器 -->
    <!-- 其中include-filter 需要配合use-default-filters使用，说明只扫描指定的包，需要将use-default-filters设置为false -->
    <context:component-scan base-package="com.hy" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- 视图解析器 ：如何把handler方法返回值解析为实际的物理视图-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/pages/"></property>
        <property name="suffix" value=".jsp"></property>
    </bean>
    <!--springmvc的高级功能开启，即可以定制配置组件（视图解析器、视图映射器、静态资源映射、拦截器......）-->
    <!-- 直接<mvc:annotation-driven />，这是应用默认配置方案，例如默认是用jackson，但是自己可以在里面进行更改。
    <mvc:annotation-driven /> 会自动注册DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter 两个bean,
        是spring MVC为@Controllers分发请求所必须的。
     -->
    <mvc:annotation-driven>
        <!--不使用默认消息转换器   springmvc默认使用jackson，需要导入jackson相关jar才可以使用@ResponseBody等标签，这里改用fastJson整合springmvc-->
        <mvc:message-converters register-defaults="false">
            <!--spring消息转换器 -->
            <bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter"/>
            <bean class="org.springframework.http.converter.BufferedImageHttpMessageConverter"/>

            <!--解决@Responcebody中文乱码问题 -->
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <constructor-arg value="UTF-8"/>
            </bean>
            <!--配合fastjson支持 -->
            <bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <!--顺序保持这样,避免IE下载出错 -->
                        <value>text/html;charset=UTF-8</value>
                        <value>application/json</value>
                    </list>
                </property>
                <property name="fastJsonConfig" ref="fastJsonConfig"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!--fastJsonConfig -->
    <bean id="fastJsonConfig" class="com.alibaba.fastjson.support.config.FastJsonConfig">
        <!--默认编码格式 -->
        <property name="charset" value="UTF-8"/>

        <property name="serializerFeatures">
            <list>
                <value>WriteNullListAsEmpty</value>
                <value>WriteDateUseDateFormat</value>
                <value>PrettyFormat</value>
                <value>WriteMapNullValue</value>
                <value>WriteNullStringAsEmpty</value>
                <value>WriteNullListAsEmpty</value>
                <value>DisableCircularReferenceDetect</value>
            </list>
        </property>
    </bean>

    <!--
    处理静态资源，为了解决在web.xml中的 <url-pattern>/</url-pattern>问题，即导致静态文件（jpg,js,css）被拦截后不能正常显示的问题。
    这里采用<mvc:default-servlet-handler/>相当于在dispatcherServlet处理链上串联了一个java:org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler静态资源
    处理类，每次请求过来，先经过DefaultServletHttpRequestHandler判断是否是静态文件，如果是静态文件，则进行处理，不是则放行交由DispatcherServlet控制器处理。 
    -->
    <mvc:default-servlet-handler/>
</beans>
